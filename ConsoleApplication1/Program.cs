using System;
//перва лекция, 2 сентября
//.Net 8.0 (Long Term Support)
namespace ConsoleApplication1
{
    //модификаторы (internal, private, public, protected)
    //инкапсуляция - принцип, который определяет сокрытие некоторых данных
    //!не смешивать предметную область и ввод/вывод! (хранилище данных, действия, ввод/вывод)
    //цикл for(;;) while() do{}while()
    //Upper Camel Case - первая буква заглавная
    internal class Program //internal не доступны из других проектов.
    {
        public static void Main(string[] args) //static не требует создания экземпляров класса
        {
            Console.WriteLine("H W !");
            var student = new Student(1,"Alex");
            Console.WriteLine(student.Name);
            student.SendNotification("Hello");
            B b = new B();
            b.Print();
            ((IAnotherPrint)b).Print();
            b.Print();
            
            //массивы
            int[] ints = {1,2,3};
            foreach (int i in ints) //для каждого i в коллекции ints
            {
            }
            //var - автоматический тип
        }
    }
    public class AnotherPrint
    {
        public virtual void Pri()
        {
            Console.WriteLine("A");   
        }    
    }

    internal interface IPrint
    {
        void Print();
    }
    //интерфейс - контракт для реализации типа данных. название с I
    //Интерфейс - это соглашение, по которому компоненты компьютерной системы обмениваются информацией.
    //В объектно-ориентированном программировании. Описание структуры объекта без деталей реализации.
    //интерфейс - декларативно описать свойства и методы и дальше их реализовывать
    internal interface IAnotherPrint 
    {
        void Print();
    }
    //множественного наследования нет (нельзя наследовать от более чем одного класса)
    //но можно от класса и интерфейса(сов)
    //проблема ромба
    //исп не public при наследовании интерфейсов
    public class B : IAnotherPrint, IPrint
    {
        void IAnotherPrint.Print()
        {
            Console.WriteLine("IAP");
        }
        public void Print()
        {
            Console.WriteLine("P");
        } 
    }
}

//л.р. какие классы? (плейлист, альбом, песни...)
//Класс — это модель для создания объектов определённого типа.

//Сборщик мусора (Garbage Collector, GC)
//GC (Garbage Collection) — это функция управления памятью, предоставляемая средой выполнения .NET,
//которая автоматически освобождает память от объектов, которые больше не используются.
//GC помогает предотвратить утечки памяти, улучшить производительность приложения
//и минимизировать вероятность ошибок нехватки памяти.

//Виртуальные машины (ВМ) — это такие абстрактные вычислительные экземпляры, созданные программой,
//работающей на другой машине, и которые физически не существуют, но работают, как настоящий компьютер.
//ВМ работает на программном обеспечении, а не на оборудовании. Так сказать, программное обеспечение
//создаёт «воображаемый» компьютер, который ведёт себя как физический.
//Другими словами, пользователь создаёт компьютер внутри другого компьютера.
//ВМ могут работать параллельно на одном базовом устройстве отдельно друг от друга.

//git status проверка статуса репозитория
//git add file_name Добавляем в индекс один файл
//git add file_name_1 file_name_2 file_name_3 Добавляем в индекс несколько файлов 
//git add . Добавляем в индекс все изменённые файлы 



